{"version":3,"sources":["components/Themed.tsx","navigation/index.tsx","components/Game.tsx","screens/NotFoundScreen.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","screens/TabThreeScreen.tsx","navigation/LinkingConfiguration.ts","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","assets/fonts/SpaceMono-Regular.ttf","index.js","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.ts","constants/Colors.ts"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","Navigation","colorScheme","linking","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","game","Game","Navigator","Screen","name","component","BottomTabNavigator","options","headerShown","NotFoundScreen","title","Group","screenOptions","presentation","ModalScreen","global","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","tint","TabOneScreen","navigation","tabBarIcon","TabBarIcon","headerRight","onPress","navigate","opacity","pressed","TabTwoScreen","TabThreeScreen","size","marginBottom","this","level","words","dict","distances","lvl0","indexes","started","n","lvl1","lvl2","lvl3","lvl4","lvl5","str","i","findWord","findDistance","dist","length","toLowerCase","styles","container","replace","link","linkText","StyleSheet","create","flex","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","WordButton","prop","useState","text","setText","_style","button","buttonUp","buttonDown","setLevel","alert","getLevel","buttonText","separator","marginVertical","height","width","borderColor","borderWidth","paddingLeft","paddingRight","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","inputWord","initialElements","message","setMessage","onChangeText","exampleState","setExampleState","clearElementsIfNeeded","pushWord","distance","string","distanceType","Zero","Almost","VeryHot","Hot","Warm","Cool","Cold","VeryCold","Freezing","id","data","renderItem","item","list","textA","marginRight","textB","buttons","buttonRight","minDist","getNumberOfWords","element","Math","floor","word","getWordByDistance","input","value","textChange","display","flexDirection","position","bottom","margin","scrollView","getStartedText","lineHeight","textAlign","paddingTop","paddingHorizontal","prefixes","Linking","config","screens","Root","TabOne","TabTwo","TabThree","Modal","NotFound","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","handleHelpPress","helpLink","helpLinkText","WebBrowser","marginHorizontal","StatusBar","Platform","OS","module","exports","registerRootComponent","isLoadingComplete","setLoadingComplete","useEffect","a","async","SplashScreen","Font","FontAwesome","font","require","console","warn","useCachedResources","_useColorScheme","background","tabIconDefault","tabIconSelected"],"mappings":"gsqWAUO,SAASA,EACdC,EACAC,GAEA,IAAMC,EAAQC,cACRC,EAAiBJ,EAAME,GAE7B,OAAIE,GAGKC,IAAOH,GAAOD,GAYlB,SAASK,EAAKN,GACnB,IAAQO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EAAzC,IAAwDV,EAAxD,GACMW,EAAQZ,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,QAEpE,OAAO,cAAC,IAAD,GAAaF,MAAO,CAAC,CAAEI,SAASJ,IAAYG,IAG9C,SAASI,EAAKd,GACnB,IAAQO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EAAzC,IAAwDV,EAAxD,GACMe,EAAkBhB,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,cAE9E,OAAO,cAAC,IAAD,GAAaF,MAAO,CAAC,CAAEQ,mBAAmBR,IAAYG,M,4dCpBhD,SAASM,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,YACnC,OACE,cAAC,IAAD,CACEC,QAASC,IACTjB,MAAuB,SAAhBe,EAAyBG,IAAYC,IAF9C,SAGE,cAACC,EAAD,MASN,IAAMC,EAAQC,cACRC,EAAO,IAAIC,IAGjB,SAASJ,IACP,OACE,eAACC,EAAMI,UAAP,WACE,cAACJ,EAAMK,OAAP,CAAcC,KAAK,OAAOC,UAAWC,EAAoBC,QAAS,CAAEC,aAAa,KACjF,cAACV,EAAMK,OAAP,CAAcC,KAAK,WAAWC,UAAWI,IAAgBF,QAAS,CAAEG,MAAO,WAC3E,cAACZ,EAAMa,MAAP,CAAaC,cAAe,CAAEC,aAAc,SAA5C,SACE,cAACf,EAAMK,OAAP,CAAcC,KAAK,QAAQC,UAAWS,WAR7CC,EAAef,KAAOA,EAkBvB,IAAMgB,EAAYC,cAElB,SAASX,IACP,IAAMd,EAAcd,cAEpB,OACE,eAACsC,EAAUd,UAAX,CACEgB,iBAAiB,SACjBN,cAAe,CACbO,sBAAuBvC,IAAOY,GAAa4B,MAH/C,UAKE,cAACJ,EAAUb,OAAX,CACEC,KAAK,SACLC,UAAWgB,IACXd,QAAS,gBAAGe,EAAH,EAAGA,WAAH,MAAmD,CAC1DZ,MAAO,SACPa,WAAY,gBAAGrC,EAAH,EAAGA,MAAH,OAAe,cAACsC,EAAD,CAAYpB,KAAK,KAAKlB,MAAOA,KACxDuC,YAAa,kBACX,cAAC,IAAD,CACEC,QAAS,kBAAMJ,EAAWK,SAAS,UACnC7C,MAAO,kBAAkB,CACvB8C,QADK,EAAGC,QACW,GAAM,WAYnC,cAACb,EAAUb,OAAX,CACEC,KAAK,SACLC,UAAWyB,IACXvB,QAAS,CACPG,MAAO,OACPa,WAAY,gBAAGrC,EAAH,EAAGA,MAAH,OAAe,cAACsC,EAAD,CAAYpB,KAAK,UAAUlB,MAAOA,QAGjE,cAAC8B,EAAUb,OAAX,CACEC,KAAK,WACLC,UAAW0B,IACXxB,QAAS,CACPG,MAAO,cACPa,WAAY,gBAAGrC,EAAH,EAAGA,MAAH,OAAe,cAACsC,EAAD,CAAYpB,KAAK,WAAWlB,MAAOA,WAUxE,SAASsC,EAAWjD,GAIlB,OAAO,cAAC,I,iWAAD,EAAayD,KAAM,GAAIlD,MAAO,CAAEmD,cAAe,IAAS1D,O,yLC5GpD0B,EAAb,WAMI,aAAgB,YACZiC,KAAKC,MAAQ,EACbD,KAAKE,MAAQC,EAAKD,MAClBF,KAAKI,UAAYC,EAAKC,QACtBN,KAAKO,SAAU,EAVvB,oCAYI,SAAgBC,GAEZ,OADAR,KAAKC,MAAQO,EACNA,GACH,KAAK,EACDR,KAAKI,UAAYC,EAAKC,QAC1B,MACA,KAAK,EACDN,KAAKI,UAAYK,EAAKH,QAC1B,MACA,KAAK,EACDN,KAAKI,UAAYM,EAAKJ,QAC1B,MACA,KAAK,EACDN,KAAKI,UAAYO,EAAKL,QAC1B,MACA,KAAK,EACDN,KAAKI,UAAYQ,EAAKN,QAC1B,MACA,KAAK,EACDN,KAAKI,UAAYS,EAAKP,QAG9B,OAAON,KAAKO,UAlCpB,sBAoCI,WACI,OAAOP,KAAKC,QArCpB,uBAuCI,SAAiBa,GACb,IAAIC,EAAIf,KAAKgB,SAASF,GACtB,OAAU,IAAPC,EAEgBf,KAAKiB,aAAaF,IAM7B,IAjDhB,+BAmDI,SAAyBG,GACrB,OAAOlB,KAAKE,MAAMF,KAAKI,UAAUc,MApDzC,mBAsDI,WACIlB,KAAKO,SAAWP,KAAKO,UAvD7B,8BAyDI,WACI,OAAOP,KAAKE,MAAMiB,SA1D1B,iBA4DI,SAAWX,GAEP,OAAOL,EAAKD,MAAMC,EAAKD,MAAMiB,OAAOX,EAAE,KA9D9C,0BAgEI,SAAqBO,GACjB,IAAI,IAAIP,EAAI,EAAGA,EAAIR,KAAKI,UAAUe,OAAQX,IACtC,GAAGR,KAAKI,UAAUI,KAAOO,EACrB,OAAOP,EAGf,OAAQ,IAtEhB,sBAyEI,SAAiBM,GACbA,EAAMA,EAAIM,cACV,IAAI,IAAIL,EAAI,EAAGA,EAAIf,KAAKE,MAAMiB,OAAQJ,IAClC,GAAGf,KAAKE,MAAMa,KAAOD,EACjB,OAAOC,EAGf,OAAQ,MAhFhB,M,0vrvDCJe,SAASxC,EAAT,GAA2E,IAAjDa,EAAgD,EAAhDA,WACvC,OACE,eAAC,IAAD,CAAMxC,MAAOyE,EAAOC,UAApB,UACE,cAAC,IAAD,CAAM1E,MAAOyE,EAAO7C,MAApB,wCACA,cAAC,IAAD,CAAkBgB,QAAS,kBAAMJ,EAAWmC,QAAQ,SAAS3E,MAAOyE,EAAOG,KAA3E,SACE,cAAC,IAAD,CAAM5E,MAAOyE,EAAOI,SAApB,qCAMR,IAAMJ,EAASK,IAAWC,OAAO,CAC/BL,UAAW,CACTM,KAAM,EACNC,WAAY,SACZC,eAAgB,SAChBC,QAAS,IAEXvD,MAAO,CACLwD,SAAU,GACVC,WAAY,QAEdT,KAAM,CACJU,UAAW,GACXC,gBAAiB,IAEnBV,SAAU,CACRO,SAAU,GACVhF,MAAO,c,yICtBX,SAASoF,EAAWC,GAClB,MAAwBC,mBAAS,UAAUD,EAAK7B,EAAE,IAAlD,WAAO+B,EAAP,KAAaC,EAAb,KAQA,IAAIC,EAASpB,EAAOqB,OAGpB,OAFc,IAAXL,EAAK7B,IAAQiC,EAAOpB,EAAOsB,UAChB,IAAXN,EAAK7B,IAAQiC,EAAOpB,EAAOuB,YAE5B,cAAC,IAAD,CAAkBpD,QAVpB,WACkBX,EAAef,KAAK+E,SAASR,EAAK7B,GAElDsC,MAAM,mBAAoBjE,EAAef,KAAKiF,YAC9CP,EAAQ,UAAUH,EAAK7B,EAAE,KAMe5D,MAAO6F,EAA/C,SACE,cAAC,IAAD,CAAM7F,MAAOyE,EAAO2B,WAApB,SAAiCT,MAKxB,SAASpD,EAAT,GAAoE,EAA5CC,WAA6C,IAClF,EAAwBkD,mBAAS,WAAjC,qBAEA,OACE,eAAC,IAAD,CAAM1F,MAAOyE,EAAOC,UAApB,UACE,cAAC,IAAD,CAAM1E,MAAOyE,EAAO7C,MAApB,4BACA,cAAC,IAAD,IAEA,cAAC,IAAD,CAAM5B,MAAOyE,EAAO4B,UAAWpG,WAAW,OAAOC,UAAU,0BAI3D,cAACsF,EAAD,CAAY5B,EAAG,IACf,cAAC4B,EAAD,CAAY5B,EAAG,IACf,cAAC4B,EAAD,CAAY5B,EAAG,IACf,cAAC4B,EAAD,CAAY5B,EAAG,IACf,cAAC4B,EAAD,CAAY5B,EAAG,IACf,cAAC4B,EAAD,CAAY5B,EAAG,OAKrB,IAAMa,EAASK,IAAWC,OAAO,CAC/BL,UAAW,CACTM,KAAM,EACNC,WAAY,SACZC,eAAgB,UAElBtD,MAAO,CACLwD,SAAU,GACVC,WAAY,QAEdgB,UAAW,CACTC,eAAgB,GAChBC,OAAQ,EACRC,MAAO,OAETV,OAAQ,CACNtF,gBAAiB,OACjBiG,YAAa,QACbC,YAAa,EACbvB,QAAS,GACTwB,YAAa,GACbC,aAAc,GACdC,aAAc,GAEhBd,SAAU,CACRvF,gBAAiB,OACjBiG,YAAa,QACbC,YAAa,EACbvB,QAAS,GACTwB,YAAa,GACbC,aAAc,GACdC,aAAc,EACdC,oBAAqB,GACrBC,qBAAsB,IAExBf,WAAY,CACVxF,gBAAiB,OACjBiG,YAAa,QACbC,YAAa,EACbvB,QAAS,GACTwB,YAAa,GACbC,aAAc,GACdC,aAAc,EACdG,uBAAwB,GACxBC,wBAAyB,IAE3Bb,WAAY,CACVhB,SAAU,GACVhF,MAAO,Y,6gCC7FX,IAEKoD,EAFD0D,EAAY,U,SAEX1D,O,uBAAAA,I,uBAAAA,I,eAAAA,I,eAAAA,I,eAAAA,I,aAAAA,I,qBAAAA,I,mBAAAA,I,gBAAAA,M,KAWL,IAEIH,EAAQ,EACG,SAASL,IAGtB,IAAImE,EAAsB,GAiK1B,OACE,eAAC,IAAD,CAAMnH,MAAOyE,EAAOC,UAApB,UACE,eA5JS,WACX,MAA8BgB,mBAAS,UAAvC,WAAO0B,EAAP,KAAgBC,EAAhB,KACA,EAA6B3B,mBAAS,UAAtC,WAAa4B,GAAb,WACA,EAAiC5B,mBAAS,MAA1C,WAEA,GAFA,UAEwCA,mBAASyB,IAAjD,WAAOI,EAAP,KAAqBC,EAArB,KAQA,IAeMC,EAAwB,WACzBpE,GAAUpB,EAAef,KAAKiF,aAC/BgB,EAAkB,GAClB9D,EAASpB,EAAef,KAAKiF,aAI3BuB,EAAW,SAACC,EAAkBT,GAElCO,IAEA,IACIrH,EAAOwH,EADPC,EAA0BrE,EAAUsE,KAWxC,OARGH,EAAS,IAAGE,EAAerE,EAAUuE,QACrCJ,EAAS,KAAIE,EAAerE,EAAUwE,SACtCL,EAAS,MAAKE,EAAerE,EAAUyE,KACvCN,EAAS,MAAKE,EAAerE,EAAU0E,MACvCP,EAAS,MAAME,EAAerE,EAAU2E,MACxCR,EAAS,MAAME,EAAerE,EAAU4E,MACxCT,EAAS,MAAME,EAAerE,EAAU6E,UACxCV,EAAS,OAAOE,EAAerE,EAAU8E,UACrCT,GACL,KAAKrE,EAAU8E,SACblI,EAAQ,QACRwH,EAAS,qBACT,MACF,KAAKpE,EAAU6E,SACbjI,EAAQ,OACRwH,EAAS,YACT,MACF,KAAKpE,EAAU4E,KACbhI,EAAQ,OACRwH,EAAS,OACT,MACF,KAAKpE,EAAU2E,KACb/H,EAAQ,aACRwH,EAAS,OACT,MACF,KAAKpE,EAAU0E,KACb9H,EAAQ,SACRwH,EAAS,OACT,MACF,KAAKpE,EAAUyE,IACb7H,EAAQ,SACRwH,EAAS,MACT,MACF,KAAKpE,EAAUwE,QACb5H,EAAQ,MACRwH,EAAS,WACT,MACF,KAAKpE,EAAUuE,OACb3H,EAAQ,SACRwH,EAAS,SACT,MACF,KAAKpE,EAAUsE,KACb1H,EAAQ,QACRwH,EAAS,gBACT,MACF,QACExH,EAAQ,QACRwH,EAAS,OAGbT,EAAe,CAAI,CAACoB,GAAK,GAAGpB,EAAgB5C,OAAQD,KAAMqD,EAAUhC,KAAMuB,EAAW9G,MAAOA,EAAOwH,OAAQA,GAAuB,IAAbD,EAAiB,GAAK,KAAOA,EAAW,mBAA9I,WAAqKR,IACpLK,EAAgBL,GACbU,IAAerE,EAAUsE,MAC1B5B,MAAM,yCAmBV,OACE,eAAC,IAAD,CAAMlG,MAAOyE,EAAOC,UAApB,UACE,cAAC,IAAD,CACI8D,KAAMjB,EACNkB,WAAc,SAAAC,GAAI,OAChB,eAAC,IAAD,CAAM1I,MAAOyE,EAAOkE,KAApB,UACE,eAAC,IAAD,CAAM3I,MAAOyE,EAAOmE,MAApB,UACA,cAAC,IAAD,CACAtH,KAAK,OACL4B,KAAM,EACNlD,MAAO,CAAE6I,YAAa,MAErB,KAAKH,EAAKA,KAAK/C,QAEhB,cAAC,IAAD,CAAM3F,MAAOyE,EAAOqE,MACpB7I,WAAcyI,EAAKA,KAAKtI,MACxBF,UAAawI,EAAKA,KAAKtI,MAFvB,SAGCsI,EAAKA,KAAKd,eAIf,eAAC,IAAD,CAAM5H,MAAOyE,EAAOsE,QAApB,UACA,cAAC,IAAD,CACAnH,MAAM,aACNgB,QAxCW,WAGjB,GAFAyE,EAAW,IAEa,KADxBH,EAAYA,EAAU1C,eACTD,OAAb,CAEA,IAAMoD,EAAY1F,EAAef,KAAKgG,UAAUA,KAC/B,IAAdS,GAAmBT,EAAU3C,QAAU,IACxC2B,MAAM,mBAES,IAAdyB,GACDD,EAASC,EAAUT,GAErBA,EAAU,OA6BF,cAAC,IAAD,CAAMlH,MAAOyE,EAAOuE,YAApB,SACE,cAAC,IAAD,CACApH,MAAM,OACNgB,QAjII,WACd6E,IAIA,IAFA,IAEA,EADIwB,EAAWhH,EAAef,KAAKgI,mBAAmB,EACtD,IAAoB/B,KAApB,aAAoC,CAAC,IAA5BgC,EAA2B,QAC/BA,EAAQ7E,KAAO2E,IAClBA,EAAUE,EAAQ7E,MAEpB,IAAMqD,EAAWyB,KAAKC,MAAgB,EAAVJ,EAAc,GACtCK,EAAQrH,EAAef,KAAKqI,kBAAkB5B,GAClDD,EAASC,EAAU2B,WAyHjB,cAAC,IAAD,CACAtJ,MAAOyE,EAAO+E,MACdlC,aAAc,SAACmC,IA3InB,SAAoBA,GAClBvC,EAAUuC,EACVpC,EAAWoC,GAyIiBC,CAAWD,GAAQnC,EAAamC,IAC1DA,MAAOrC,SAQT,IACA,cAAC,IAAD,CAAMpH,MAAOyE,EAAO4B,UAAWpG,WAAW,OAAOC,UAAU,6BAOjE,IAAMuE,EAASK,IAAWC,OAAO,CAC/BL,UAAW,CACTM,KAAM,EACNC,WAAY,SACZC,eAAgB,UAElByD,KAAM,CACJ3D,KAAM,EACNC,WAAY,aACZC,eAAgB,cAElBtD,MAAO,CACLwD,SAAU,GACVC,WAAY,QAEdgB,UAAW,CACTC,eAAgB,GAChBC,OAAQ,EACRC,MAAO,OAETuC,QAAS,CACPY,QAAS,OACTC,cAAe,OAEjBZ,YAAa,CACXrC,YAAa,IAEfb,OAAQ,CACNtF,gBAAiB,OACjBiG,YAAa,QACbtB,QAAS,GACTF,WAAY,SACZ4B,aAAc,GACdL,MAAO,MACPqD,SAAU,WACVC,OAAQ,GACRvD,OAAQ,IAEVH,WAAY,CACVhB,SAAU,GACVhF,MAAO,OACPyJ,SAAU,WACVC,OAAQ,IAEVN,MAAO,CACLhD,MAAO,MACPpB,SAAU,GACV5E,gBAAiB,QACjBiG,YAAa,OACbrG,MAAO,OACPmG,OAAQ,GACRwD,OAAQ,GACRrD,YAAa,EACbvB,QAAS,GACT0E,SAAU,WACVC,OAAQ,IAEVE,WAAY,CACVxJ,gBAAiB,OACjBgG,MAAO,OAGTb,KAAM,CACJP,SAAU,IAEZwD,MAAO,CACLxD,SAAU,IAEZ0D,MAAO,CACL1D,SAAU,Q,+GCrQC,SAASnC,IACtB,OACE,eAAC,IAAD,CAAMjD,MAAOyE,EAAOC,UAApB,UACE,cAAC,IAAD,CAAM1E,MAAOyE,EAAO7C,MAApB,yBACA,eAAC,IAAD,CACI5B,MAAOyE,EAAOwF,eACdhK,WAAW,oBACXC,UAAU,wBAHd,yCAIiC,KAJjC,kJAIsL,KAJtL,4EAIqQ,KAJrQ,0DAIkU,KAJlU,gBAMA,cAAC,IAAD,CAAMF,MAAOyE,EAAO4B,UAAWpG,WAAW,OAAOC,UAAU,6BAMjE,IAAMuE,EAASK,IAAWC,OAAO,CAC/BL,UAAW,CACTM,KAAM,EACNC,WAAY,SACZC,eAAgB,UAElBtD,MAAO,CACLwD,SAAU,GACVC,WAAY,QAEd4E,eAAgB,CACd7E,SAAU,GACV8E,WAAY,GACZC,UAAW,SACXC,WAAY,GACZC,kBAAmB,IAErBhE,UAAW,CACTC,eAAgB,GAChBC,OAAQ,EACRC,MAAO,U,iCClCX,IAIM7F,EAA8C,CAClD2J,SAAU,CALZ,OAKaC,EAAgB,MAC3BC,OAAQ,CACNC,QAAS,CACPC,KAAM,CACJD,QAAS,CACPE,OAAQ,CACNF,QAAS,CACPlI,aAAc,QAGlBqI,OAAQ,CACNH,QAAS,CACPzH,aAAc,QAGlB6H,SAAU,CACRJ,QAAS,CACPxH,eAAgB,YAKxB6H,MAAO,QACPC,SAAU,OAKDpK,O,stBCtCR,SAASqK,EAASvL,GACvB,OAAO,cAAC,IAAD,OAAUA,GAAV,IAAiBO,MAAO,CAACP,EAAMO,MAAO,CAAEiL,WAAY,kBCI9C,SAASC,EAAT,GAAqD,IAA3BC,EAA0B,EAA1BA,KACvC,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAMnL,MAAOyE,EAAO2G,oBAApB,UACE,cAAC,IAAD,CACEpL,MAAOyE,EAAOwF,eACdhK,WAAW,kBACXC,UAAU,wBAHZ,+CAOA,cAAC,IAAD,CACEF,MAAO,CAACyE,EAAO4G,uBAAwB5G,EAAO6G,oBAC9CpL,UAAU,yBACVD,WAAW,mBAHb,SAIE,cAAC+K,EAAD,UAAWG,MAGb,cAAC,IAAD,CACEnL,MAAOyE,EAAOwF,eACdhK,WAAW,oBACXC,UAAU,wBAHZ,+FAQF,cAAC,IAAD,CAAMF,MAAOyE,EAAO8G,cAApB,SACE,cAACC,EAAA,EAAD,CAAkB5I,QAAS6I,EAAiBzL,MAAOyE,EAAOiH,SAA1D,SACE,cAAC,IAAD,CAAM1L,MAAOyE,EAAOkH,aAAc1L,WAAYH,IAAOO,MAAMiC,KAA3D,2FASV,SAASmJ,IACPG,IACE,0FAIJ,IAAMnH,EAASK,IAAWC,OAAO,CAC/BqG,oBAAqB,CACnBnG,WAAY,SACZ4G,iBAAkB,IAEpBP,mBAAoB,CAClBhF,eAAgB,GAElB+E,uBAAwB,CACtBxE,aAAc,EACdwD,kBAAmB,GAErBJ,eAAgB,CACd7E,SAAU,GACV8E,WAAY,GACZC,UAAW,UAEboB,cAAe,CACbjG,UAAW,GACXuG,iBAAkB,GAClB5G,WAAY,UAEdyG,SAAU,CACRnG,gBAAiB,IAEnBoG,aAAc,CACZxB,UAAW,YCtEA,SAASnI,IACtB,OACE,eAAC,IAAD,CAAMhC,MAAOyE,EAAOC,UAApB,UACE,cAAC,IAAD,CAAM1E,MAAOyE,EAAO7C,MAApB,mBACA,cAAC,IAAD,CAAM5B,MAAOyE,EAAO4B,UAAWpG,WAAW,OAAOC,UAAU,0BAC3D,cAACgL,EAAD,CAAgBC,KAAK,6BAGrB,cAACW,EAAA,EAAD,CAAW9L,MAAuB,QAAhB+L,IAASC,GAAe,QAAU,YAK1D,IAAMvH,EAASK,IAAWC,OAAO,CAC/BL,UAAW,CACTM,KAAM,EACNC,WAAY,SACZC,eAAgB,UAElBtD,MAAO,CACLwD,SAAU,GACVC,WAAY,QAEdgB,UAAW,CACTC,eAAgB,GAChBC,OAAQ,EACRC,MAAO,U,0DChCXyF,EAAOC,QAAU,IAA0B,iC,ywBCO3CC,aCAe,WACb,IAAMC,ECHO,WACb,MAAgD1G,oBAAS,GAAzD,WAAO0G,EAAP,KAA0BC,EAA1B,KAyBA,OAtBAC,qBAAU,WACR,EAAAC,EAAAC,OAAA,gEAEIC,MAFJ,WAAAF,EAAA,MAKUG,IAAA,OACDC,IAAYC,MADX,IAEJ,aAAcC,EAAQ,SAP5B,sDAWIC,QAAQC,KAAR,MAXJ,uBAaIV,GAAmB,GACnBI,MAdJ,mFAmBC,IAEIL,EDvBmBY,GACpBtM,EAAcd,cAEpB,OAAKwM,EAID,eAAC,IAAD,WACE,cAAC,IAAD,CAAY1L,YAAaA,IACzB,cAACoL,EAAA,EAAD,OALG,S,+EEPI,SAASlM,IACtB,OAAOqN,gB,gCCHM,KACb5M,MAAO,CACLsF,KAAM,OACNuH,WAAY,OACZ5K,KAPmB,UAQnB6K,eAAgB,OAChBC,gBATmB,WAWrB9M,KAAM,CACJqF,KAAM,OACNuH,WAAY,OACZ5K,KAbkB,OAclB6K,eAAgB,OAChBC,gBAfkB,U","file":"static/js/app.e6742b2e.chunk.js","sourcesContent":["/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\nimport { Game } from '../components/Game';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport TabThreeScreen from '../screens/TabThreeScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\nconst game = new Game();\n(global as any).game = game;\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneScreen}\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\n          title: 'Levels',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"gg\" color={color} />,\n          headerRight: () => (\n            <Pressable\n              onPress={() => navigation.navigate('Modal')}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}>\n              {/*<FontAwesome\n                name=\"info-circle\"\n                size={25}\n                color={Colors[colorScheme].text}\n                style={{ marginRight: 15 }}\n              />*/}\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoScreen}\n        options={{\n          title: 'Play',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"gamepad\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabThree\"\n        component={TabThreeScreen}\n        options={{\n          title: 'How to play',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"question\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import dict from \"../assets/words.json\";\r\nimport lvl0 from \"../assets/lvl0.json\";\r\nimport lvl1 from \"../assets/lvl1.json\";\r\nimport lvl2 from \"../assets/lvl2.json\";\r\nimport lvl3 from \"../assets/lvl3.json\";\r\nimport lvl4 from \"../assets/lvl4.json\";\r\nimport lvl5 from \"../assets/lvl5.json\";\r\n//console.log(jsonData);\r\n\r\nexport class Game {\r\n    private words: string[];\r\n    private distances: number[];\r\n    private level: number;\r\n    public started;\r\n\r\n    constructor () {\r\n        this.level = 0;\r\n        this.words = dict.words;\r\n        this.distances = lvl0.indexes;\r\n        this.started = false;\r\n    }\r\n    public setLevel(n:number):boolean {\r\n        this.level = n;\r\n        switch(n){\r\n            case 0:\r\n                this.distances = lvl0.indexes;\r\n            break;\r\n            case 1:\r\n                this.distances = lvl1.indexes;\r\n            break;\r\n            case 2:\r\n                this.distances = lvl2.indexes;\r\n            break;\r\n            case 3:\r\n                this.distances = lvl3.indexes;\r\n            break;\r\n            case 4:\r\n                this.distances = lvl4.indexes;\r\n            break;\r\n            case 5:\r\n                this.distances = lvl5.indexes;\r\n            break;\r\n        }\r\n        return this.started;\r\n    }\r\n    public getLevel():number {\r\n        return this.level;\r\n    }\r\n    public inputWord(str:string):number {\r\n        let i = this.findWord(str);\r\n        if(i !== -1) {\r\n            //alert(\"word index:\"+i);\r\n            let distance = this.findDistance(i);\r\n            //if(distance !== -1) {\r\n            //alert(\"distance:\"+distance);\r\n            return distance;\r\n            //}\r\n        }\r\n        return -1;\r\n    }\r\n    public getWordByDistance(dist:number):string {\r\n        return this.words[this.distances[dist]];\r\n    }\r\n    public start() {\r\n        this.started = !this.started;\r\n    }\r\n    public getNumberOfWords() {\r\n        return this.words.length;\r\n    }\r\n    public get(n: number) {\r\n        //return 0;\r\n        return dict.words[dict.words.length-n-1];\r\n    }\r\n    private findDistance(i:number):number {\r\n        for(let n = 0; n < this.distances.length; n++) {\r\n            if(this.distances[n] === i) {\r\n                return n;\r\n            }\r\n        }\r\n        return -1;\r\n        //alert(\"not found\");\r\n    }\r\n    private findWord(str:string):number {\r\n        str = str.toLowerCase();\r\n        for(let i = 0; i < this.words.length; i++) {\r\n            if(this.words[i] === str) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n        //alert(\"not found\");\r\n    }\r\n}\r\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\nimport { useEffect, useState } from 'react';\n\n\n\n\n\nfunction WordButton(prop: {n: number}) {\n  const [text, setText] = useState('Level '+(prop.n+1));\n\n  function handleClick() {\n    const active = (global as any).game.setLevel(prop.n);\n    //if(active)\n    alert('Word changed to '+(global as any).game.getLevel())\n    setText('Level '+(prop.n+1));\n  }\n  let _style = styles.button;\n  if(prop.n === 0)_style=styles.buttonUp;\n  if(prop.n === 5)_style=styles.buttonDown;\n  return (\n    <TouchableOpacity onPress={handleClick} style={_style}>\n      <Text style={styles.buttonText}>{text}</Text>\n      </TouchableOpacity>\n  );\n}\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n  const [text, setText] = useState('Level 1');\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Choose a level</Text>\n      <Text>\n      </Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      {\n      //<EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n      }\n      <WordButton n={0} />\n      <WordButton n={1} />\n      <WordButton n={2} />\n      <WordButton n={3} />\n      <WordButton n={4} />\n      <WordButton n={5} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  button: {\n    backgroundColor: \"gray\",\n    borderColor: \"white\",\n    borderWidth: 4,\n    padding: 10,\n    paddingLeft: 70,\n    paddingRight: 70,\n    borderRadius: 0,\n  },\n  buttonUp: {\n    backgroundColor: \"gray\",\n    borderColor: \"white\",\n    borderWidth: 4,\n    padding: 10,\n    paddingLeft: 70,\n    paddingRight: 70,\n    borderRadius: 0,\n    borderTopLeftRadius: 30,\n    borderTopRightRadius: 30,\n  },\n  buttonDown: {\n    backgroundColor: \"gray\",\n    borderColor: \"white\",\n    borderWidth: 4,\n    padding: 10,\n    paddingLeft: 70,\n    paddingRight: 70,\n    borderRadius: 0,\n    borderBottomLeftRadius: 30,\n    borderBottomRightRadius: 30,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  }, \n});\n","import { StyleSheet, TouchableOpacity, TextInput, TextInputProps, ScrollView, FlatList, Button } from 'react-native';\nimport { useState } from 'react';\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { Game } from '../components/Game';\nimport { FontAwesome } from '@expo/vector-icons';\n\nlet inputWord = \"banana\";\n\nenum distances {\n  Freezing,\n  VeryCold,\n  Cool,\n  Cold,\n  Warm,\n  Hot,\n  VeryHot,\n  Almost,\n  Zero,\n}\nlet elements: any = []\nlet i =0;\nlet level = 0;\nexport default function TabTwoScreen() {\n\n\n  var initialElements:any = [\n  ]\n\n  const UselessTextInput = () => {\n\n  }; \n\n  const List = () => {\n    const [message, setMessage] = useState('banana');\n    const [text, onChangeText] = useState(\"banana\");\n    const [number, onChangeNumber] = useState(null);\n\n    const [exampleState, setExampleState] = useState(initialElements);\n    let str = \"\"\n    \n    function textChange(value: string) {\n      inputWord=value;\n      setMessage(value);\n    }\n    \n    const getHint = () => {\n      clearElementsIfNeeded();\n\n      let hint = \"\";\n      let minDist = (global as any).game.getNumberOfWords()/4;\n      for (let element of initialElements){\n        if(element.dist < minDist)\n        minDist = element.dist;\n      }\n      const distance = Math.floor(minDist * 2 / 3);\n      let word = (global as any).game.getWordByDistance(distance);\n      pushWord(distance, word)\n    }\n\n        \n    const clearElementsIfNeeded = () => {\n      if(level != (global as any).game.getLevel()) {\n        initialElements = [];\n        level = (global as any).game.getLevel();\n      }\n    }\n\n    const pushWord = (distance: number, inputWord: string) => {\n\n      clearElementsIfNeeded();\n\n      let distanceType: distances = distances.Zero;\n      let color, string: string;\n\n      if(distance>0) distanceType = distances.Almost;\n      if(distance>20) distanceType = distances.VeryHot;\n      if(distance>100) distanceType = distances.Hot;\n      if(distance>500) distanceType = distances.Warm;\n      if(distance>1000) distanceType = distances.Cool;\n      if(distance>2000) distanceType = distances.Cold;\n      if(distance>5000) distanceType = distances.VeryCold;\n      if(distance>15000) distanceType = distances.Freezing;\n      switch(distanceType) {\n        case distances.Freezing:\n          color = \"white\";\n          string = \"Not related at all\";\n          break;\n        case distances.VeryCold:\n          color = \"blue\";\n          string = \"Very Cold\";\n          break;\n        case distances.Cold:\n          color = \"cyan\";\n          string = \"Cold\";\n          break;\n        case distances.Cool:\n          color = \"aquamarine\";\n          string = \"Cool\";\n          break;\n        case distances.Warm:\n          color = \"yellow\";\n          string = \"Warm\";\n          break;\n        case distances.Hot:\n          color = \"orange\";\n          string = \"Hot\";\n          break;\n        case distances.VeryHot:\n          color = \"red\";\n          string = \"Very Hot\";\n          break;\n        case distances.Almost:\n          color = \"purple\";\n          string = \"Almost\";\n          break;\n        case distances.Zero:\n          color = \"green\";\n          string = \"Correct word!\";\n          break;\n        default:\n          color = \"white\";\n          string = \"ERR!\";\n          break;\n      }\n      initialElements = [{id : \"\"+initialElements.length, dist: distance, text: inputWord, color: color, string: string + (distance === 0 ? \"\": (\" (\" + distance + \" words ahead)\"))}, ...initialElements];\n      setExampleState(initialElements);\n      if(distanceType===distances.Zero)\n        alert(\"Congratulations! You found the word!\");\n    }\n\n    const addElement = () => {\n      setMessage(\"\");\n      inputWord = inputWord.toLowerCase();\n      if(inputWord.length === 0)\n        return;\n      const distance = (global as any).game.inputWord(inputWord);\n      if(distance === -1 || inputWord.length <= 1){\n        alert(\"Word not found\");\n      }\n      if(distance !== -1){\n        pushWord(distance, inputWord);\n      }\n      inputWord=\"\";\n    }\n\n\n    return(\n      <View style={styles.container}>\n        <FlatList\n            data={exampleState}\n            renderItem = {item => (\n              <View style={styles.list}>\n                <Text style={styles.textA}>\n                <FontAwesome\n                name=\"play\"\n                size={0}\n                style={{ marginRight: 15 }}\n                />\n                {\"  \"+item.item.text}\n                </Text>\n                <Text style={styles.textB}\n                lightColor = {item.item.color}\n                darkColor = {item.item.color}>\n                {item.item.string}\n                </Text>\n              </View>\n              )} />\n            <View style={styles.buttons}> \n            <Button\n            title=\"Enter word\"\n            onPress={addElement} />\n              <View style={styles.buttonRight}> \n                <Button\n                title=\"Hint\"\n                onPress={getHint} />\n              </View>\n            </View>\n        <TextInput\n        style={styles.input}\n        onChangeText={(value) => {textChange(value); onChangeText(value)}}\n        value={message}\n      />\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <List/>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n    </View>\n  );\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  list: {\n    flex: 1,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  buttons: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  buttonRight: {\n    paddingLeft: 10,\n  },\n  button: {\n    backgroundColor: \"gray\",\n    borderColor: \"white\",\n    padding: 10,\n    alignItems: 'center',\n    borderRadius: 20,\n    width: '50%',\n    position: 'absolute',\n    bottom: 50,\n    height: 50,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n    position: 'absolute',\n    bottom: 10,\n  },\n  input: {\n    width: '80%',\n    fontSize: 20,\n    backgroundColor: \"white\",\n    borderColor: \"gray\",\n    color: '#888',\n    height: 50,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n    position: 'absolute',\n    bottom: 40,\n  },\n  scrollView: {\n    backgroundColor: 'pink',\n    width: '85%',\n    //bottom: 84,\n  },\n  text: {\n    fontSize: 42,\n  },\n  textA: {\n    fontSize: 22,\n  },\n  textB: {\n    fontSize: 16,\n  },\n});\n","import { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabThreeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>How to play</Text>\n      <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,100,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          You need to guess the word. {'\\n'}After each word input, you will be shown how many words are semantically (logically) closer to the desired word than the one you just entered. {'\\n'}Use this information to head the words you enter towards the needed one. {'\\n'}If you give up, you can always push the \"hint\" button. {'\\n'}Good luck!\n        </Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n       {/*<EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />}*/}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n    paddingTop: 50,\n    paddingHorizontal: 50,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n          TabThree: {\n            screens: {\n              TabThreeScreen: 'three',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,100,0.8)\"\n          darkColor=\"rgba(255,155,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Modal</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n"],"sourceRoot":""}